using System;
using System.IO;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Pose.Persistence;
using Pose.Runtime.MonoGameDotNetCore.Skeletons;
using Spritesheet = Pose.Persistence.Spritesheet;

namespace Pose.Runtime.MonoGameDotNetCore
{
    public static class ContentManagerExtensions
    {
        /// <summary>
        /// Loads a Pose SkeletonDefinition through the MonoGame content pipeline from the .pose, .sheet and .png file.
        /// </summary>
        /// <param name="name">The filename as added into the Monogame content with the content pipeline tool. Without extension.</param>
        public static SkeletonDefinition LoadPoseSkeletonDefinition(this ContentManager content, string name)
        {
            return LoadPoseSkeletonDefinition(content, name + ".pose", name, name + ".sheet");
        }

        /// <summary>
        /// Load a Pose SkeletonDefinition from the 3 files generated by the Pose editor (myasset.pose, myasset.png and myasset.sheet). If you used default editor save behavior, you can use the overload with just the 'name' parameter.
        /// </summary>
        public static SkeletonDefinition LoadPoseSkeletonDefinition(this ContentManager content, string poseFilename, string pngFilename, string sheetFilename)
        {
            if (pngFilename.EndsWith(".png", StringComparison.OrdinalIgnoreCase))
                pngFilename = pngFilename.Substring(0, pngFilename.Length - 4);
            var poseDocument = LoadPoseDocument(content, poseFilename);
            var spritesheet = LoadSpritesheet(content, sheetFilename);
            var texture = content.Load<Texture2D>(pngFilename);
            return new SkeletonDefinition(poseDocument, spritesheet, texture);
        }

        /// <summary>
        /// Loads a Pose document containing a skeleton and its animation(s) from a file created the Pose editor. Also automatically loads necessary resources (sprites).
        /// </summary>
        public static Document LoadPoseDocument(this ContentManager content, string filename)
        {
            var data = GetContentFileData(content, filename);
            return Document.Parser.ParseFrom(data);
        }

        public static Rendering.Spritesheet LoadSpritesheet(this ContentManager content, string filename)
        {
            var data = GetContentFileData(content, filename);
            var spritesheet = Spritesheet.Parser.ParseFrom(data);
            return SpritesheetMapper.MapSpritesheet(spritesheet);
        }

        private static byte[] GetContentFileData(ContentManager content, string filename)
        {
            var fullPath = Path.Combine(Path.GetFullPath(content.RootDirectory), filename);
            if (!File.Exists(fullPath))
                throw new FileNotFoundException($"Content file not found: \"{fullPath}\".");
            var data = File.ReadAllBytes(fullPath);
            return data;
        }
    }
}
