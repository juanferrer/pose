// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: document.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pose.Persistence {

  /// <summary>Holder for reflection information generated from document.proto</summary>
  public static partial class DocumentReflection {

    #region Descriptor
    /// <summary>File descriptor for document.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DocumentReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5kb2N1bWVudC5wcm90bxIEUG9zZSKtAQoIRG9jdW1lbnQSFAoMbGFzdEZp",
            "bGVuYW1lGAEgASgJEhIKCmlkU2VxdWVuY2UYAiABKAQSEwoLYXNzZXRGb2xk",
            "ZXIYAyABKAkSIgoJZHJhd09yZGVyGAQgASgLMg8uUG9zZS5EcmF3T3JkZXIS",
            "GQoFbm9kZXMYBSADKAsyCi5Qb3NlLk5vZGUSIwoKYW5pbWF0aW9ucxgGIAMo",
            "CzIPLlBvc2UuQW5pbWF0aW9uIhwKCURyYXdPcmRlchIPCgdub2RlSWRzGAEg",
            "AygEItQBCgROb2RlEgoKAmlkGAEgASgEEgwKBG5hbWUYAiABKAkSEAoIcGFy",
            "ZW50SWQYAyABKAQSHQoIcG9zaXRpb24YBCABKAsyCy5Qb3NlLlBvaW50Eg0K",
            "BWFuZ2xlGAUgASgCEiEKBHR5cGUYBiABKA4yEy5Qb3NlLk5vZGUuTm9kZVR5",
            "cGUSEQoJc3ByaXRlS2V5GAcgASgJEhIKCmJvbmVMZW5ndGgYCCABKAIiKAoI",
            "Tm9kZVR5cGUSDgoKU1BSSVRFTk9ERRAAEgwKCEJPTkVOT0RFEAEiHQoFUG9p",
            "bnQSCQoBeBgBIAEoAhIJCgF5GAIgASgCIqEBCglBbmltYXRpb24SCgoCaWQY",
            "ASABKAQSDAoEbmFtZRgCIAEoCRISCgpCZWdpbkZyYW1lGAMgASgREhAKCEVu",
            "ZEZyYW1lGAQgASgREhcKD0ZyYW1lc1BlclNlY29uZBgFIAEoDRIOCgZJc0xv",
            "b3AYBiABKAgSKwoObm9kZUFuaW1hdGlvbnMYByADKAsyEy5Qb3NlLk5vZGVB",
            "bmltYXRpb24iVAoNTm9kZUFuaW1hdGlvbhIOCgZub2RlSWQYASABKAQSMwoS",
            "cHJvcGVydHlBbmltYXRpb25zGAIgAygLMhcuUG9zZS5Qcm9wZXJ0eUFuaW1h",
            "dGlvbiJaChFQcm9wZXJ0eUFuaW1hdGlvbhIKCgJpZBgBIAEoBBIQCghwcm9w",
            "ZXJ0eRgCIAEoDRIOCgZ2ZXJ0ZXgYAyABKA0SFwoEa2V5cxgEIAMoCzIJLlBv",
            "c2UuS2V5ItwBCgNLZXkSCgoCaWQYASABKAQSDQoFZnJhbWUYAiABKBESDQoF",
            "dmFsdWUYAyABKAISOgoRSW50ZXJwb2xhdGlvblR5cGUYBCABKA4yHy5Qb3Nl",
            "LktleS5JbnRlcnBvbGF0aW9uVHlwZUVudW0SIgoFQ3VydmUYBSABKAsyES5Q",
            "b3NlLkJlemllckN1cnZlSAAiOQoVSW50ZXJwb2xhdGlvblR5cGVFbnVtEgoK",
            "BkxpbmVhchAAEggKBEhvbGQQARIKCgZCZXppZXIQAkIQCg5vcHRpb25hbF9j",
            "dXJ2ZSJxCgtCZXppZXJDdXJ2ZRIXCgJwMBgBIAEoCzILLlBvc2UuUG9pbnQS",
            "FwoCcDEYAiABKAsyCy5Qb3NlLlBvaW50EhcKAnAyGAMgASgLMgsuUG9zZS5Q",
            "b2ludBIXCgJwMxgEIAEoCzILLlBvc2UuUG9pbnRCE6oCEFBvc2UuUGVyc2lz",
            "dGVuY2ViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pose.Persistence.Document), global::Pose.Persistence.Document.Parser, new[]{ "LastFilename", "IdSequence", "AssetFolder", "DrawOrder", "Nodes", "Animations" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pose.Persistence.DrawOrder), global::Pose.Persistence.DrawOrder.Parser, new[]{ "NodeIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pose.Persistence.Node), global::Pose.Persistence.Node.Parser, new[]{ "Id", "Name", "ParentId", "Position", "Angle", "Type", "SpriteKey", "BoneLength" }, null, new[]{ typeof(global::Pose.Persistence.Node.Types.NodeType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pose.Persistence.Point), global::Pose.Persistence.Point.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pose.Persistence.Animation), global::Pose.Persistence.Animation.Parser, new[]{ "Id", "Name", "BeginFrame", "EndFrame", "FramesPerSecond", "IsLoop", "NodeAnimations" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pose.Persistence.NodeAnimation), global::Pose.Persistence.NodeAnimation.Parser, new[]{ "NodeId", "PropertyAnimations" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pose.Persistence.PropertyAnimation), global::Pose.Persistence.PropertyAnimation.Parser, new[]{ "Id", "Property", "Vertex", "Keys" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pose.Persistence.Key), global::Pose.Persistence.Key.Parser, new[]{ "Id", "Frame", "Value", "InterpolationType", "Curve" }, new[]{ "OptionalCurve" }, new[]{ typeof(global::Pose.Persistence.Key.Types.InterpolationTypeEnum) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pose.Persistence.BezierCurve), global::Pose.Persistence.BezierCurve.Parser, new[]{ "P0", "P1", "P2", "P3" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Document : pb::IMessage<Document>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Document> _parser = new pb::MessageParser<Document>(() => new Document());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Document> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pose.Persistence.DocumentReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Document() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Document(Document other) : this() {
      lastFilename_ = other.lastFilename_;
      idSequence_ = other.idSequence_;
      assetFolder_ = other.assetFolder_;
      drawOrder_ = other.drawOrder_ != null ? other.drawOrder_.Clone() : null;
      nodes_ = other.nodes_.Clone();
      animations_ = other.animations_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Document Clone() {
      return new Document(this);
    }

    /// <summary>Field number for the "lastFilename" field.</summary>
    public const int LastFilenameFieldNumber = 1;
    private string lastFilename_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastFilename {
      get { return lastFilename_; }
      set {
        lastFilename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "idSequence" field.</summary>
    public const int IdSequenceFieldNumber = 2;
    private ulong idSequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong IdSequence {
      get { return idSequence_; }
      set {
        idSequence_ = value;
      }
    }

    /// <summary>Field number for the "assetFolder" field.</summary>
    public const int AssetFolderFieldNumber = 3;
    private string assetFolder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetFolder {
      get { return assetFolder_; }
      set {
        assetFolder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "drawOrder" field.</summary>
    public const int DrawOrderFieldNumber = 4;
    private global::Pose.Persistence.DrawOrder drawOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pose.Persistence.DrawOrder DrawOrder {
      get { return drawOrder_; }
      set {
        drawOrder_ = value;
      }
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Pose.Persistence.Node> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(42, global::Pose.Persistence.Node.Parser);
    private readonly pbc::RepeatedField<global::Pose.Persistence.Node> nodes_ = new pbc::RepeatedField<global::Pose.Persistence.Node>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pose.Persistence.Node> Nodes {
      get { return nodes_; }
    }

    /// <summary>Field number for the "animations" field.</summary>
    public const int AnimationsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Pose.Persistence.Animation> _repeated_animations_codec
        = pb::FieldCodec.ForMessage(50, global::Pose.Persistence.Animation.Parser);
    private readonly pbc::RepeatedField<global::Pose.Persistence.Animation> animations_ = new pbc::RepeatedField<global::Pose.Persistence.Animation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pose.Persistence.Animation> Animations {
      get { return animations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Document);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Document other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastFilename != other.LastFilename) return false;
      if (IdSequence != other.IdSequence) return false;
      if (AssetFolder != other.AssetFolder) return false;
      if (!object.Equals(DrawOrder, other.DrawOrder)) return false;
      if(!nodes_.Equals(other.nodes_)) return false;
      if(!animations_.Equals(other.animations_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LastFilename.Length != 0) hash ^= LastFilename.GetHashCode();
      if (IdSequence != 0UL) hash ^= IdSequence.GetHashCode();
      if (AssetFolder.Length != 0) hash ^= AssetFolder.GetHashCode();
      if (drawOrder_ != null) hash ^= DrawOrder.GetHashCode();
      hash ^= nodes_.GetHashCode();
      hash ^= animations_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LastFilename.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LastFilename);
      }
      if (IdSequence != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(IdSequence);
      }
      if (AssetFolder.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AssetFolder);
      }
      if (drawOrder_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DrawOrder);
      }
      nodes_.WriteTo(output, _repeated_nodes_codec);
      animations_.WriteTo(output, _repeated_animations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LastFilename.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LastFilename);
      }
      if (IdSequence != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(IdSequence);
      }
      if (AssetFolder.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AssetFolder);
      }
      if (drawOrder_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DrawOrder);
      }
      nodes_.WriteTo(ref output, _repeated_nodes_codec);
      animations_.WriteTo(ref output, _repeated_animations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastFilename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastFilename);
      }
      if (IdSequence != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IdSequence);
      }
      if (AssetFolder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetFolder);
      }
      if (drawOrder_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DrawOrder);
      }
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      size += animations_.CalculateSize(_repeated_animations_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Document other) {
      if (other == null) {
        return;
      }
      if (other.LastFilename.Length != 0) {
        LastFilename = other.LastFilename;
      }
      if (other.IdSequence != 0UL) {
        IdSequence = other.IdSequence;
      }
      if (other.AssetFolder.Length != 0) {
        AssetFolder = other.AssetFolder;
      }
      if (other.drawOrder_ != null) {
        if (drawOrder_ == null) {
          DrawOrder = new global::Pose.Persistence.DrawOrder();
        }
        DrawOrder.MergeFrom(other.DrawOrder);
      }
      nodes_.Add(other.nodes_);
      animations_.Add(other.animations_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LastFilename = input.ReadString();
            break;
          }
          case 16: {
            IdSequence = input.ReadUInt64();
            break;
          }
          case 26: {
            AssetFolder = input.ReadString();
            break;
          }
          case 34: {
            if (drawOrder_ == null) {
              DrawOrder = new global::Pose.Persistence.DrawOrder();
            }
            input.ReadMessage(DrawOrder);
            break;
          }
          case 42: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
          case 50: {
            animations_.AddEntriesFrom(input, _repeated_animations_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            LastFilename = input.ReadString();
            break;
          }
          case 16: {
            IdSequence = input.ReadUInt64();
            break;
          }
          case 26: {
            AssetFolder = input.ReadString();
            break;
          }
          case 34: {
            if (drawOrder_ == null) {
              DrawOrder = new global::Pose.Persistence.DrawOrder();
            }
            input.ReadMessage(DrawOrder);
            break;
          }
          case 42: {
            nodes_.AddEntriesFrom(ref input, _repeated_nodes_codec);
            break;
          }
          case 50: {
            animations_.AddEntriesFrom(ref input, _repeated_animations_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DrawOrder : pb::IMessage<DrawOrder>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DrawOrder> _parser = new pb::MessageParser<DrawOrder>(() => new DrawOrder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pose.Persistence.DocumentReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawOrder(DrawOrder other) : this() {
      nodeIds_ = other.nodeIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawOrder Clone() {
      return new DrawOrder(this);
    }

    /// <summary>Field number for the "nodeIds" field.</summary>
    public const int NodeIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_nodeIds_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> nodeIds_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> NodeIds {
      get { return nodeIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodeIds_.Equals(other.nodeIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodeIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      nodeIds_.WriteTo(output, _repeated_nodeIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      nodeIds_.WriteTo(ref output, _repeated_nodeIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodeIds_.CalculateSize(_repeated_nodeIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawOrder other) {
      if (other == null) {
        return;
      }
      nodeIds_.Add(other.nodeIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            nodeIds_.AddEntriesFrom(input, _repeated_nodeIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            nodeIds_.AddEntriesFrom(ref input, _repeated_nodeIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Node : pb::IMessage<Node>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Node> _parser = new pb::MessageParser<Node>(() => new Node());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Node> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pose.Persistence.DocumentReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node(Node other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      parentId_ = other.parentId_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      angle_ = other.angle_;
      type_ = other.type_;
      spriteKey_ = other.spriteKey_;
      boneLength_ = other.boneLength_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node Clone() {
      return new Node(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parentId" field.</summary>
    public const int ParentIdFieldNumber = 3;
    private ulong parentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ParentId {
      get { return parentId_; }
      set {
        parentId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 4;
    private global::Pose.Persistence.Point position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pose.Persistence.Point Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 5;
    private float angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private global::Pose.Persistence.Node.Types.NodeType type_ = global::Pose.Persistence.Node.Types.NodeType.Spritenode;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pose.Persistence.Node.Types.NodeType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "spriteKey" field.</summary>
    public const int SpriteKeyFieldNumber = 7;
    private string spriteKey_ = "";
    /// <summary>
    /// the sprite's filepath relative to document.assetFolder when node.type == SPRITENODE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpriteKey {
      get { return spriteKey_; }
      set {
        spriteKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "boneLength" field.</summary>
    public const int BoneLengthFieldNumber = 8;
    private float boneLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BoneLength {
      get { return boneLength_; }
      set {
        boneLength_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Node);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Node other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (ParentId != other.ParentId) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
      if (Type != other.Type) return false;
      if (SpriteKey != other.SpriteKey) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BoneLength, other.BoneLength)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ParentId != 0UL) hash ^= ParentId.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Angle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
      if (Type != global::Pose.Persistence.Node.Types.NodeType.Spritenode) hash ^= Type.GetHashCode();
      if (SpriteKey.Length != 0) hash ^= SpriteKey.GetHashCode();
      if (BoneLength != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BoneLength);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (ParentId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ParentId);
      }
      if (position_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
      if (Angle != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Angle);
      }
      if (Type != global::Pose.Persistence.Node.Types.NodeType.Spritenode) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Type);
      }
      if (SpriteKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SpriteKey);
      }
      if (BoneLength != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(BoneLength);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (ParentId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ParentId);
      }
      if (position_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
      if (Angle != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Angle);
      }
      if (Type != global::Pose.Persistence.Node.Types.NodeType.Spritenode) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Type);
      }
      if (SpriteKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SpriteKey);
      }
      if (BoneLength != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(BoneLength);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ParentId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ParentId);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Angle != 0F) {
        size += 1 + 4;
      }
      if (Type != global::Pose.Persistence.Node.Types.NodeType.Spritenode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (SpriteKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpriteKey);
      }
      if (BoneLength != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Node other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ParentId != 0UL) {
        ParentId = other.ParentId;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Pose.Persistence.Point();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Angle != 0F) {
        Angle = other.Angle;
      }
      if (other.Type != global::Pose.Persistence.Node.Types.NodeType.Spritenode) {
        Type = other.Type;
      }
      if (other.SpriteKey.Length != 0) {
        SpriteKey = other.SpriteKey;
      }
      if (other.BoneLength != 0F) {
        BoneLength = other.BoneLength;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            ParentId = input.ReadUInt64();
            break;
          }
          case 34: {
            if (position_ == null) {
              Position = new global::Pose.Persistence.Point();
            }
            input.ReadMessage(Position);
            break;
          }
          case 45: {
            Angle = input.ReadFloat();
            break;
          }
          case 48: {
            Type = (global::Pose.Persistence.Node.Types.NodeType) input.ReadEnum();
            break;
          }
          case 58: {
            SpriteKey = input.ReadString();
            break;
          }
          case 69: {
            BoneLength = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            ParentId = input.ReadUInt64();
            break;
          }
          case 34: {
            if (position_ == null) {
              Position = new global::Pose.Persistence.Point();
            }
            input.ReadMessage(Position);
            break;
          }
          case 45: {
            Angle = input.ReadFloat();
            break;
          }
          case 48: {
            Type = (global::Pose.Persistence.Node.Types.NodeType) input.ReadEnum();
            break;
          }
          case 58: {
            SpriteKey = input.ReadString();
            break;
          }
          case 69: {
            BoneLength = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Node message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum NodeType {
        [pbr::OriginalName("SPRITENODE")] Spritenode = 0,
        [pbr::OriginalName("BONENODE")] Bonenode = 1,
      }

    }
    #endregion

  }

  public sealed partial class Point : pb::IMessage<Point>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Point> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pose.Persistence.DocumentReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point(Point other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point Clone() {
      return new Point(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Point);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Point other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Point other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Animation : pb::IMessage<Animation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Animation> _parser = new pb::MessageParser<Animation>(() => new Animation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Animation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pose.Persistence.DocumentReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation(Animation other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      beginFrame_ = other.beginFrame_;
      endFrame_ = other.endFrame_;
      framesPerSecond_ = other.framesPerSecond_;
      isLoop_ = other.isLoop_;
      nodeAnimations_ = other.nodeAnimations_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation Clone() {
      return new Animation(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BeginFrame" field.</summary>
    public const int BeginFrameFieldNumber = 3;
    private int beginFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BeginFrame {
      get { return beginFrame_; }
      set {
        beginFrame_ = value;
      }
    }

    /// <summary>Field number for the "EndFrame" field.</summary>
    public const int EndFrameFieldNumber = 4;
    private int endFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndFrame {
      get { return endFrame_; }
      set {
        endFrame_ = value;
      }
    }

    /// <summary>Field number for the "FramesPerSecond" field.</summary>
    public const int FramesPerSecondFieldNumber = 5;
    private uint framesPerSecond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FramesPerSecond {
      get { return framesPerSecond_; }
      set {
        framesPerSecond_ = value;
      }
    }

    /// <summary>Field number for the "IsLoop" field.</summary>
    public const int IsLoopFieldNumber = 6;
    private bool isLoop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLoop {
      get { return isLoop_; }
      set {
        isLoop_ = value;
      }
    }

    /// <summary>Field number for the "nodeAnimations" field.</summary>
    public const int NodeAnimationsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Pose.Persistence.NodeAnimation> _repeated_nodeAnimations_codec
        = pb::FieldCodec.ForMessage(58, global::Pose.Persistence.NodeAnimation.Parser);
    private readonly pbc::RepeatedField<global::Pose.Persistence.NodeAnimation> nodeAnimations_ = new pbc::RepeatedField<global::Pose.Persistence.NodeAnimation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pose.Persistence.NodeAnimation> NodeAnimations {
      get { return nodeAnimations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Animation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Animation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (BeginFrame != other.BeginFrame) return false;
      if (EndFrame != other.EndFrame) return false;
      if (FramesPerSecond != other.FramesPerSecond) return false;
      if (IsLoop != other.IsLoop) return false;
      if(!nodeAnimations_.Equals(other.nodeAnimations_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (BeginFrame != 0) hash ^= BeginFrame.GetHashCode();
      if (EndFrame != 0) hash ^= EndFrame.GetHashCode();
      if (FramesPerSecond != 0) hash ^= FramesPerSecond.GetHashCode();
      if (IsLoop != false) hash ^= IsLoop.GetHashCode();
      hash ^= nodeAnimations_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (BeginFrame != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(BeginFrame);
      }
      if (EndFrame != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(EndFrame);
      }
      if (FramesPerSecond != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(FramesPerSecond);
      }
      if (IsLoop != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsLoop);
      }
      nodeAnimations_.WriteTo(output, _repeated_nodeAnimations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (BeginFrame != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(BeginFrame);
      }
      if (EndFrame != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(EndFrame);
      }
      if (FramesPerSecond != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(FramesPerSecond);
      }
      if (IsLoop != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsLoop);
      }
      nodeAnimations_.WriteTo(ref output, _repeated_nodeAnimations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (BeginFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BeginFrame);
      }
      if (EndFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(EndFrame);
      }
      if (FramesPerSecond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FramesPerSecond);
      }
      if (IsLoop != false) {
        size += 1 + 1;
      }
      size += nodeAnimations_.CalculateSize(_repeated_nodeAnimations_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Animation other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.BeginFrame != 0) {
        BeginFrame = other.BeginFrame;
      }
      if (other.EndFrame != 0) {
        EndFrame = other.EndFrame;
      }
      if (other.FramesPerSecond != 0) {
        FramesPerSecond = other.FramesPerSecond;
      }
      if (other.IsLoop != false) {
        IsLoop = other.IsLoop;
      }
      nodeAnimations_.Add(other.nodeAnimations_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            BeginFrame = input.ReadSInt32();
            break;
          }
          case 32: {
            EndFrame = input.ReadSInt32();
            break;
          }
          case 40: {
            FramesPerSecond = input.ReadUInt32();
            break;
          }
          case 48: {
            IsLoop = input.ReadBool();
            break;
          }
          case 58: {
            nodeAnimations_.AddEntriesFrom(input, _repeated_nodeAnimations_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            BeginFrame = input.ReadSInt32();
            break;
          }
          case 32: {
            EndFrame = input.ReadSInt32();
            break;
          }
          case 40: {
            FramesPerSecond = input.ReadUInt32();
            break;
          }
          case 48: {
            IsLoop = input.ReadBool();
            break;
          }
          case 58: {
            nodeAnimations_.AddEntriesFrom(ref input, _repeated_nodeAnimations_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NodeAnimation : pb::IMessage<NodeAnimation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NodeAnimation> _parser = new pb::MessageParser<NodeAnimation>(() => new NodeAnimation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeAnimation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pose.Persistence.DocumentReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeAnimation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeAnimation(NodeAnimation other) : this() {
      nodeId_ = other.nodeId_;
      propertyAnimations_ = other.propertyAnimations_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeAnimation Clone() {
      return new NodeAnimation(this);
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private ulong nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "propertyAnimations" field.</summary>
    public const int PropertyAnimationsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pose.Persistence.PropertyAnimation> _repeated_propertyAnimations_codec
        = pb::FieldCodec.ForMessage(18, global::Pose.Persistence.PropertyAnimation.Parser);
    private readonly pbc::RepeatedField<global::Pose.Persistence.PropertyAnimation> propertyAnimations_ = new pbc::RepeatedField<global::Pose.Persistence.PropertyAnimation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pose.Persistence.PropertyAnimation> PropertyAnimations {
      get { return propertyAnimations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeAnimation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeAnimation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      if(!propertyAnimations_.Equals(other.propertyAnimations_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId != 0UL) hash ^= NodeId.GetHashCode();
      hash ^= propertyAnimations_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (NodeId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(NodeId);
      }
      propertyAnimations_.WriteTo(output, _repeated_propertyAnimations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (NodeId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(NodeId);
      }
      propertyAnimations_.WriteTo(ref output, _repeated_propertyAnimations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NodeId);
      }
      size += propertyAnimations_.CalculateSize(_repeated_propertyAnimations_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeAnimation other) {
      if (other == null) {
        return;
      }
      if (other.NodeId != 0UL) {
        NodeId = other.NodeId;
      }
      propertyAnimations_.Add(other.propertyAnimations_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NodeId = input.ReadUInt64();
            break;
          }
          case 18: {
            propertyAnimations_.AddEntriesFrom(input, _repeated_propertyAnimations_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NodeId = input.ReadUInt64();
            break;
          }
          case 18: {
            propertyAnimations_.AddEntriesFrom(ref input, _repeated_propertyAnimations_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PropertyAnimation : pb::IMessage<PropertyAnimation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PropertyAnimation> _parser = new pb::MessageParser<PropertyAnimation>(() => new PropertyAnimation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropertyAnimation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pose.Persistence.DocumentReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyAnimation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyAnimation(PropertyAnimation other) : this() {
      id_ = other.id_;
      property_ = other.property_;
      vertex_ = other.vertex_;
      keys_ = other.keys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyAnimation Clone() {
      return new PropertyAnimation(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 2;
    private uint property_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Property {
      get { return property_; }
      set {
        property_ = value;
      }
    }

    /// <summary>Field number for the "vertex" field.</summary>
    public const int VertexFieldNumber = 3;
    private uint vertex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Vertex {
      get { return vertex_; }
      set {
        vertex_ = value;
      }
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Pose.Persistence.Key> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(34, global::Pose.Persistence.Key.Parser);
    private readonly pbc::RepeatedField<global::Pose.Persistence.Key> keys_ = new pbc::RepeatedField<global::Pose.Persistence.Key>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pose.Persistence.Key> Keys {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropertyAnimation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropertyAnimation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Property != other.Property) return false;
      if (Vertex != other.Vertex) return false;
      if(!keys_.Equals(other.keys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Property != 0) hash ^= Property.GetHashCode();
      if (Vertex != 0) hash ^= Vertex.GetHashCode();
      hash ^= keys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Property != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Property);
      }
      if (Vertex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Vertex);
      }
      keys_.WriteTo(output, _repeated_keys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Property != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Property);
      }
      if (Vertex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Vertex);
      }
      keys_.WriteTo(ref output, _repeated_keys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Property != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Property);
      }
      if (Vertex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Vertex);
      }
      size += keys_.CalculateSize(_repeated_keys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PropertyAnimation other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Property != 0) {
        Property = other.Property;
      }
      if (other.Vertex != 0) {
        Vertex = other.Vertex;
      }
      keys_.Add(other.keys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            Property = input.ReadUInt32();
            break;
          }
          case 24: {
            Vertex = input.ReadUInt32();
            break;
          }
          case 34: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            Property = input.ReadUInt32();
            break;
          }
          case 24: {
            Vertex = input.ReadUInt32();
            break;
          }
          case 34: {
            keys_.AddEntriesFrom(ref input, _repeated_keys_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Key : pb::IMessage<Key>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Key> _parser = new pb::MessageParser<Key>(() => new Key());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Key> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pose.Persistence.DocumentReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Key() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Key(Key other) : this() {
      id_ = other.id_;
      frame_ = other.frame_;
      value_ = other.value_;
      interpolationType_ = other.interpolationType_;
      switch (other.OptionalCurveCase) {
        case OptionalCurveOneofCase.Curve:
          Curve = other.Curve.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Key Clone() {
      return new Key(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 2;
    private int frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "InterpolationType" field.</summary>
    public const int InterpolationTypeFieldNumber = 4;
    private global::Pose.Persistence.Key.Types.InterpolationTypeEnum interpolationType_ = global::Pose.Persistence.Key.Types.InterpolationTypeEnum.Linear;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pose.Persistence.Key.Types.InterpolationTypeEnum InterpolationType {
      get { return interpolationType_; }
      set {
        interpolationType_ = value;
      }
    }

    /// <summary>Field number for the "Curve" field.</summary>
    public const int CurveFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pose.Persistence.BezierCurve Curve {
      get { return optionalCurveCase_ == OptionalCurveOneofCase.Curve ? (global::Pose.Persistence.BezierCurve) optionalCurve_ : null; }
      set {
        optionalCurve_ = value;
        optionalCurveCase_ = value == null ? OptionalCurveOneofCase.None : OptionalCurveOneofCase.Curve;
      }
    }

    private object optionalCurve_;
    /// <summary>Enum of possible cases for the "optional_curve" oneof.</summary>
    public enum OptionalCurveOneofCase {
      None = 0,
      Curve = 5,
    }
    private OptionalCurveOneofCase optionalCurveCase_ = OptionalCurveOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionalCurveOneofCase OptionalCurveCase {
      get { return optionalCurveCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOptionalCurve() {
      optionalCurveCase_ = OptionalCurveOneofCase.None;
      optionalCurve_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Key);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Key other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Frame != other.Frame) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
      if (InterpolationType != other.InterpolationType) return false;
      if (!object.Equals(Curve, other.Curve)) return false;
      if (OptionalCurveCase != other.OptionalCurveCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Frame != 0) hash ^= Frame.GetHashCode();
      if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
      if (InterpolationType != global::Pose.Persistence.Key.Types.InterpolationTypeEnum.Linear) hash ^= InterpolationType.GetHashCode();
      if (optionalCurveCase_ == OptionalCurveOneofCase.Curve) hash ^= Curve.GetHashCode();
      hash ^= (int) optionalCurveCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Frame != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Frame);
      }
      if (Value != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Value);
      }
      if (InterpolationType != global::Pose.Persistence.Key.Types.InterpolationTypeEnum.Linear) {
        output.WriteRawTag(32);
        output.WriteEnum((int) InterpolationType);
      }
      if (optionalCurveCase_ == OptionalCurveOneofCase.Curve) {
        output.WriteRawTag(42);
        output.WriteMessage(Curve);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Frame != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Frame);
      }
      if (Value != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Value);
      }
      if (InterpolationType != global::Pose.Persistence.Key.Types.InterpolationTypeEnum.Linear) {
        output.WriteRawTag(32);
        output.WriteEnum((int) InterpolationType);
      }
      if (optionalCurveCase_ == OptionalCurveOneofCase.Curve) {
        output.WriteRawTag(42);
        output.WriteMessage(Curve);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Frame);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      if (InterpolationType != global::Pose.Persistence.Key.Types.InterpolationTypeEnum.Linear) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InterpolationType);
      }
      if (optionalCurveCase_ == OptionalCurveOneofCase.Curve) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Curve);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Key other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Frame != 0) {
        Frame = other.Frame;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
      if (other.InterpolationType != global::Pose.Persistence.Key.Types.InterpolationTypeEnum.Linear) {
        InterpolationType = other.InterpolationType;
      }
      switch (other.OptionalCurveCase) {
        case OptionalCurveOneofCase.Curve:
          if (Curve == null) {
            Curve = new global::Pose.Persistence.BezierCurve();
          }
          Curve.MergeFrom(other.Curve);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            Frame = input.ReadSInt32();
            break;
          }
          case 29: {
            Value = input.ReadFloat();
            break;
          }
          case 32: {
            InterpolationType = (global::Pose.Persistence.Key.Types.InterpolationTypeEnum) input.ReadEnum();
            break;
          }
          case 42: {
            global::Pose.Persistence.BezierCurve subBuilder = new global::Pose.Persistence.BezierCurve();
            if (optionalCurveCase_ == OptionalCurveOneofCase.Curve) {
              subBuilder.MergeFrom(Curve);
            }
            input.ReadMessage(subBuilder);
            Curve = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            Frame = input.ReadSInt32();
            break;
          }
          case 29: {
            Value = input.ReadFloat();
            break;
          }
          case 32: {
            InterpolationType = (global::Pose.Persistence.Key.Types.InterpolationTypeEnum) input.ReadEnum();
            break;
          }
          case 42: {
            global::Pose.Persistence.BezierCurve subBuilder = new global::Pose.Persistence.BezierCurve();
            if (optionalCurveCase_ == OptionalCurveOneofCase.Curve) {
              subBuilder.MergeFrom(Curve);
            }
            input.ReadMessage(subBuilder);
            Curve = subBuilder;
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Key message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum InterpolationTypeEnum {
        [pbr::OriginalName("Linear")] Linear = 0,
        [pbr::OriginalName("Hold")] Hold = 1,
        [pbr::OriginalName("Bezier")] Bezier = 2,
      }

    }
    #endregion

  }

  public sealed partial class BezierCurve : pb::IMessage<BezierCurve>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BezierCurve> _parser = new pb::MessageParser<BezierCurve>(() => new BezierCurve());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BezierCurve> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pose.Persistence.DocumentReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BezierCurve() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BezierCurve(BezierCurve other) : this() {
      p0_ = other.p0_ != null ? other.p0_.Clone() : null;
      p1_ = other.p1_ != null ? other.p1_.Clone() : null;
      p2_ = other.p2_ != null ? other.p2_.Clone() : null;
      p3_ = other.p3_ != null ? other.p3_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BezierCurve Clone() {
      return new BezierCurve(this);
    }

    /// <summary>Field number for the "p0" field.</summary>
    public const int P0FieldNumber = 1;
    private global::Pose.Persistence.Point p0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pose.Persistence.Point P0 {
      get { return p0_; }
      set {
        p0_ = value;
      }
    }

    /// <summary>Field number for the "p1" field.</summary>
    public const int P1FieldNumber = 2;
    private global::Pose.Persistence.Point p1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pose.Persistence.Point P1 {
      get { return p1_; }
      set {
        p1_ = value;
      }
    }

    /// <summary>Field number for the "p2" field.</summary>
    public const int P2FieldNumber = 3;
    private global::Pose.Persistence.Point p2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pose.Persistence.Point P2 {
      get { return p2_; }
      set {
        p2_ = value;
      }
    }

    /// <summary>Field number for the "p3" field.</summary>
    public const int P3FieldNumber = 4;
    private global::Pose.Persistence.Point p3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pose.Persistence.Point P3 {
      get { return p3_; }
      set {
        p3_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BezierCurve);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BezierCurve other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(P0, other.P0)) return false;
      if (!object.Equals(P1, other.P1)) return false;
      if (!object.Equals(P2, other.P2)) return false;
      if (!object.Equals(P3, other.P3)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (p0_ != null) hash ^= P0.GetHashCode();
      if (p1_ != null) hash ^= P1.GetHashCode();
      if (p2_ != null) hash ^= P2.GetHashCode();
      if (p3_ != null) hash ^= P3.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (p0_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(P0);
      }
      if (p1_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(P1);
      }
      if (p2_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(P2);
      }
      if (p3_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(P3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (p0_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(P0);
      }
      if (p1_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(P1);
      }
      if (p2_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(P2);
      }
      if (p3_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(P3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (p0_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(P0);
      }
      if (p1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(P1);
      }
      if (p2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(P2);
      }
      if (p3_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(P3);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BezierCurve other) {
      if (other == null) {
        return;
      }
      if (other.p0_ != null) {
        if (p0_ == null) {
          P0 = new global::Pose.Persistence.Point();
        }
        P0.MergeFrom(other.P0);
      }
      if (other.p1_ != null) {
        if (p1_ == null) {
          P1 = new global::Pose.Persistence.Point();
        }
        P1.MergeFrom(other.P1);
      }
      if (other.p2_ != null) {
        if (p2_ == null) {
          P2 = new global::Pose.Persistence.Point();
        }
        P2.MergeFrom(other.P2);
      }
      if (other.p3_ != null) {
        if (p3_ == null) {
          P3 = new global::Pose.Persistence.Point();
        }
        P3.MergeFrom(other.P3);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (p0_ == null) {
              P0 = new global::Pose.Persistence.Point();
            }
            input.ReadMessage(P0);
            break;
          }
          case 18: {
            if (p1_ == null) {
              P1 = new global::Pose.Persistence.Point();
            }
            input.ReadMessage(P1);
            break;
          }
          case 26: {
            if (p2_ == null) {
              P2 = new global::Pose.Persistence.Point();
            }
            input.ReadMessage(P2);
            break;
          }
          case 34: {
            if (p3_ == null) {
              P3 = new global::Pose.Persistence.Point();
            }
            input.ReadMessage(P3);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (p0_ == null) {
              P0 = new global::Pose.Persistence.Point();
            }
            input.ReadMessage(P0);
            break;
          }
          case 18: {
            if (p1_ == null) {
              P1 = new global::Pose.Persistence.Point();
            }
            input.ReadMessage(P1);
            break;
          }
          case 26: {
            if (p2_ == null) {
              P2 = new global::Pose.Persistence.Point();
            }
            input.ReadMessage(P2);
            break;
          }
          case 34: {
            if (p3_ == null) {
              P3 = new global::Pose.Persistence.Point();
            }
            input.ReadMessage(P3);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
